// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QA.Data;

namespace QA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d2eac9d3-6141-476c-9020-f42250d63e80",
                            ConcurrencyStamp = "b952fe20-b530-4847-ae39-a1f454ec5013",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "d2eac9d3-6141-476c-9020-f42250d63e81",
                            ConcurrencyStamp = "16d7b153-2b68-4337-b6a9-639120aea0fb",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = "d2eac9d3-6141-476c-9020-f42250d63e82",
                            ConcurrencyStamp = "f26a0020-b7f8-4656-95ec-5e0b9aa95f87",
                            Name = "Moderator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "abc",
                            ClaimValue = "1",
                            RoleId = "d2eac9d3-6141-476c-9020-f42250d63e80"
                        },
                        new
                        {
                            Id = -2,
                            ClaimType = "b",
                            ClaimValue = "1",
                            RoleId = "d2eac9d3-6141-476c-9020-f42250d63e81"
                        },
                        new
                        {
                            Id = -3,
                            ClaimType = "c",
                            ClaimValue = "1",
                            RoleId = "d2eac9d3-6141-476c-9020-f42250d63e82"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d2eac9d3-6141-476c-9020-f42250d63e86",
                            RoleId = "d2eac9d3-6141-476c-9020-f42250d63e80"
                        },
                        new
                        {
                            UserId = "d985a7b1-d58b-4266-ab86-a0a0ff91ccc1",
                            RoleId = "d2eac9d3-6141-476c-9020-f42250d63e81"
                        },
                        new
                        {
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            RoleId = "d2eac9d3-6141-476c-9020-f42250d63e82"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("QA.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -1,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 12
                        },
                        new
                        {
                            Id = -2,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -1,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 10
                        },
                        new
                        {
                            Id = -3,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -2,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 10
                        },
                        new
                        {
                            Id = -4,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -3,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 10
                        },
                        new
                        {
                            Id = -5,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -4,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 10
                        },
                        new
                        {
                            Id = -6,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -5,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 10
                        });
                });

            modelBuilder.Entity("QA.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -1,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -2,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -1,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -3,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -1,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -4,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -2,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -5,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -3,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -6,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -4,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -7,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            QuestionId = -5,
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -8,
                            AnswerId = -1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -9,
                            AnswerId = -2,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -10,
                            AnswerId = -3,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -11,
                            AnswerId = -4,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        },
                        new
                        {
                            Id = -12,
                            AnswerId = -4,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000"
                        });
                });

            modelBuilder.Entity("QA.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Answers")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Answers = 1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            Title = "Question title -1 ",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 12
                        },
                        new
                        {
                            Id = -2,
                            Answers = 1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            Title = "Question title -2",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 12
                        },
                        new
                        {
                            Id = -3,
                            Answers = 1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            Title = "Question title -3",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 12
                        },
                        new
                        {
                            Id = -4,
                            Answers = 1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            Title = "Question title -4",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 12
                        },
                        new
                        {
                            Id = -5,
                            Answers = 1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            Title = "Question title -5",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 12
                        },
                        new
                        {
                            Id = -6,
                            Answers = 1,
                            CreateDateTime = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "{\"blocks\":[{\"key\":\"a7jmu\",\"text\":\"12321123123213\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}",
                            Title = "Question title -6",
                            UserId = "f984066c-816d-4531-bd9a-c63256ca7000",
                            Votes = 0
                        });
                });

            modelBuilder.Entity("QA.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "iphone",
                            QuestionId = -1
                        },
                        new
                        {
                            Id = -2,
                            Name = "apple",
                            QuestionId = -2
                        },
                        new
                        {
                            Id = -3,
                            Name = "android",
                            QuestionId = -3
                        },
                        new
                        {
                            Id = -4,
                            Name = "c#",
                            QuestionId = -4
                        },
                        new
                        {
                            Id = -5,
                            Name = "java",
                            QuestionId = -5
                        },
                        new
                        {
                            Id = -6,
                            Name = "js",
                            QuestionId = -6
                        });
                });

            modelBuilder.Entity("QA.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d2eac9d3-6141-476c-9020-f42250d63e86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b3e029c-9d49-4d25-968b-9c3a913d903c",
                            Email = "ff@qq.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "FF@QQ.COM",
                            NormalizedUserName = "FF@QQ.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQJrTVkVJiBSAvpCuUKqC3g7BQyCNs1igCObs9zKmTySe8b1gNJ1iFMpviFa++k2w==",
                            PhoneNumberConfirmed = false,
                            Reputation = 0,
                            SecurityStamp = "N4Q2NOPGJ5DYCTUU67NCDN6EELEJFO4N",
                            TwoFactorEnabled = false,
                            UserName = "ff@qq.com"
                        },
                        new
                        {
                            Id = "d985a7b1-d58b-4266-ab86-a0a0ff91ccc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "714d2b03-873f-479b-9249-4e7ef30866f9",
                            Email = "cc861010@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CC861010@GMAIL.COM",
                            NormalizedUserName = "CC861010@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIyzWsOem/kp/V7dgVxg6cmAvcFfC+8zAc0bLT6iOLsm7qMiONewX13Nm3kihjYVvQ==",
                            PhoneNumberConfirmed = false,
                            Reputation = 0,
                            SecurityStamp = "USIVDWV4UHHSCT6ZTTJDMSRXHVVU4P2D",
                            TwoFactorEnabled = false,
                            UserName = "cc861010@gmail.com"
                        },
                        new
                        {
                            Id = "f984066c-816d-4531-bd9a-c63256ca7000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd5e1fdf-03ea-47f2-84c7-2873d0ae85b9",
                            Email = "cc@qq.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CC@QQ.COM",
                            NormalizedUserName = "CC@QQ.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL3A1emCK92O5spftjyhQkRYl0VhfVQQGmkmn1QM68AWMzDNoOLXsfXgOmNcpaWprw==",
                            PhoneNumberConfirmed = false,
                            Reputation = 0,
                            SecurityStamp = "BNDKY6ICQC3YUUQL5OTFI2277AJY7LGJ",
                            TwoFactorEnabled = false,
                            UserName = "cc@qq.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QA.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QA.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QA.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QA.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QA.Models.Answer", b =>
                {
                    b.HasOne("QA.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QA.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QA.Models.Comment", b =>
                {
                    b.HasOne("QA.Models.Answer", "Answer")
                        .WithMany("Comments")
                        .HasForeignKey("AnswerId");

                    b.HasOne("QA.Models.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId");

                    b.HasOne("QA.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QA.Models.Question", b =>
                {
                    b.HasOne("QA.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QA.Models.Tag", b =>
                {
                    b.HasOne("QA.Models.Question", null)
                        .WithMany("Tags")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("QA.Models.Answer", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("QA.Models.Question", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
